{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","getUserPosts","a","fetch","response","json","responseJSON","data","getPostDetails","postId","PostsList","selectedPostId","setSelectedPostId","selectedUserId","useState","posts","setPosts","getPosts","filerPosts","filter","post","userId","useEffect","className","map","key","id","title","type","onClick","getPostComments","filterData","item","NewCommentForm","grabUpdatedInfo","newName","setName","email","setEmail","body","setBody","handleChange","event","target","name","value","onSubmit","preventDefault","placeholder","onChange","Loader","PostDetails","postsDetails","setDetails","comments","setComments","toggleButton","setToggleButton","getComments","getDetails","length","comment","method","then","newComment","headers","JSON","stringify","pushPostComments","App","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fceb0a95.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async() => {\n  const response = await fetch(`${BASE_URL}/posts`);\n  const responseJSON = await response.json();\n  const { data } = responseJSON;\n\n  return data;\n};\n\nexport const getPostDetails = async(postId) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const data = await response.json();\n\n  return data;\n};\n\n// export const createPost = async() => {\n//   const response = await fetch(`${BASE_URL}/comments/256`, {\n//     method: 'POST',\n//     headers: {\n//       'Content-type': 'application/json; charset=UTF-8',\n//     },\n//     body: JSON.stringify({\n//       id: 256,\n//       body: 'comment',\n//     }),\n//   });\n//   const data = await response.json();\n\n//   return data;\n// };\n\n// // createPost();\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  selectedPostId,\n  setSelectedPostId,\n  selectedUserId,\n}) => {\n  const [posts, setPosts] = useState([]);\n\n  const getPosts = async() => {\n    const response = await getUserPosts();\n\n    if (selectedUserId === 0) {\n      setPosts(response);\n    } else {\n      const filerPosts = response\n        .filter(post => post.userId === selectedUserId);\n\n      setPosts(filerPosts);\n    }\n  };\n\n  useEffect(() => {\n    getPosts();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                [User #\n                {post.userId}\n                ]:\n                {' '}\n              </b>\n              {post.title}\n            </div>\n            {selectedPostId === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  setSelectedPostId(null);\n                }}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  setSelectedPostId(post.id);\n                }}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  setSelectedPostId: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async() => {\n  const response = await fetch(`${BASE_URL}/comments`);\n  const responseJSON = await response.json();\n  const { data } = responseJSON;\n  const filterData = data.filter(item => item.postId);\n\n  return filterData;\n};\n\nexport const pushPostComments = newComment => fetch(`${BASE_URL}/comments`, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify({\n    ...newComment,\n  }),\n});\n\nexport const deletePostComments\n= postId => fetch(`${BASE_URL}/comments/${postId}`, {\n  method: 'DELETE',\n});\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ selectedPostId, grabUpdatedInfo }) => {\n  const [newName, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'body':\n        return setBody(value);\n\n      default: {\n        return null;\n      }\n    }\n  };\n\n  const onSumbit = (event) => {\n    event.preventDefault();\n\n    const newComment = {\n      postId: selectedPostId,\n      name: newName,\n      email,\n      body,\n    };\n\n    grabUpdatedInfo(newComment);\n    setName('');\n  };\n\n  return (\n    <form onSubmit={onSumbit} className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={newName.value}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  grabUpdatedInfo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments,\n  pushPostComments, deletePostComments } from '../../api/comments';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader/Loader';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postsDetails, setDetails] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [toggleButton, setToggleButton] = useState(false);\n\n  const grabUpdatedInfo = (newComment) => {\n    pushPostComments(newComment)\n      .then(getComments);\n  };\n\n  const getComments = async() => {\n    const response = await getPostComments();\n    const filterData = response\n      .filter(item => (item.postId === selectedPostId));\n\n    setComments(filterData);\n  };\n\n  useEffect(() => {\n    const getDetails = async() => {\n      const response = await getPostDetails(selectedPostId);\n\n      setDetails(response.data);\n    };\n\n    getDetails();\n    setComments([]);\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    getComments();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {postsDetails.length < 1 ? (\n        <Loader />\n      ) : (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>\n              {postsDetails.title}\n            </p>\n            <h3>Body</h3>\n            <p>\n              {postsDetails.body}\n            </p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {comments.length < 1 ? (\n              <Loader />\n            ) : (\n              <>\n                {toggleButton ? (\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={() => setToggleButton(false)}\n                  >\n                    {`Hide ${comments.length} comments`}\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={() => setToggleButton(true)}\n                  >\n                    {`Show ${comments.length} comments`}\n                  </button>\n                )}\n              </>\n            )}\n            {toggleButton && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li\n                    className=\"PostDetails__list-item\"\n                    key={comment.id}\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        deletePostComments(comment.id)\n                          .then(getComments);\n                      }}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n        </>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            grabUpdatedInfo={grabUpdatedInfo}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              setSelectedUserId(+event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {!!selectedPostId && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}